length(y)
library(XML)
file<-"D:/Download/getdata3.xml"
doc<-xmlTreeParse(file,useInternal=TRUE)
rootNode<-xmlRoot(doc)
y<-xpathSApply(rootNode,"//zipcode",xmlValue)
x<-y[y==21231]
length(x)
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
}
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
library(datasets)
data(iris)
?iris
class(iris)
x<-iris
x
library(datasets)
data(mtcars)
mtcars
split(mtcars, mtcars$cyl)
lapply(mtcars, mean)
mean(mtcars$mpg, mtcars$cyl)
split(mtcars, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
library(datasets)
data(iris)
iris
apply(iris[, 1:4], 2, mean)
debug(ls)
ls
n
1
2
3
ls
q
e''
q
quit
exit
quit
r
lm
ls
exit
debug(ls)
debug(ls)
exit
quit
n
n
n
n
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
?rnom
str(rnorm)
?rnorm
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
plot(x,y)
?rbinorm
?rbinom
y=1
x1=1
x2=1
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
setwd("~/GitHub/ProgrammingAssignment2")
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setInverseMatrix <- function(solve) m <<- solve
getInverseMatrix <- function() m
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
matrix<-x$get
m<-solve(matrix, ...)
x$setInverseMatrix(m)
m
}
c=rbind(c(1, -1/4), c(-1/4, 1))
cacheSolve(c)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setInverseMatrix <- function(solve) m <<- solve
getInverseMatrix <- function() m
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getInverseMatrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
matrix<-x$get
m<-solve(matrix, ...)
x$setInverseMatrix(m)
m
}
c=rbind(c(1, -1/4), c(-1/4, 1))
cacheSolve(c)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setInverseMatrix <- function(solve) m <<- solve
getInverseMatrix <- function() m
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getInverseMatrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
matrix<-x$get
m<-solve(matrix, ...)
x$setInverseMatrix(m)
m
}
c=rbind(c(1, -1/4), c(-1/4, 1))
cacheSolve(c)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setInverseMatrix <- function(solve) m <<- solve
getInverseMatrix <- function() m
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getInverseMatrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
matrix<-x$get
m<-solve(matrix, ...)
x$setInverseMatrix(m)
m
}
c = matrix(
+   c(2, 4, 3, 1),
+   nrow=2,
+   ncol=2)
cacheSolve(c)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setInverseMatrix <- function(solve) m <<- solve
getInverseMatrix <- function() m
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getInverseMatrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
matrix<-x$get
m<-solve(matrix, ...)
x$setInverseMatrix(m)
m
}
c = matrix(   c(2, 4, 3, 1),  +   nrow=2,   +   ncol=2)
cacheSolve(c)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setInverseMatrix <- function(solve) m <<- solve
getInverseMatrix <- function() m
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getInverseMatrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
matrix<-x$get
m<-solve(matrix, ...)
x$setInverseMatrix(m)
m
}
c = matrix(   c(2, 4, 3, 1),  nrow=2,  ncol=2)
cacheSolve(c)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setInverseMatrix <- function(solve) m <<- solve
getInverseMatrix <- function() m
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getInverseMatrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
matrix<-x$get
m<-solve(matrix, ...)
x$setInverseMatrix(m)
m
}
c <- matrix(   c(2, 4, 3, 1),  nrow=2,  ncol=2)
cacheSolve(c)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setInverseMatrix <- function(solve) m <<- solve
getInverseMatrix <- function() m
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getInverseMatrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
matrix<-x$get
m<-solve(matrix, ...)
x$setInverseMatrix(m)
m
}
c <-c(2,4,3,1)
cacheSolve(c)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setInverseMatrix <- function(solve) m <<- solve
getInverseMatrix <- function() m
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getInverseMatrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
matrix<-x$get
m<-solve(matrix, ...)
x$setInverseMatrix(m)
m
}
c <-c(2,4,3,1)
solve(c)
c <-matrix(c(2,4,3,1),nrow=2,ncol=2)
solve(c)
cachesolve(c)
cacheSolve(c)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setInverseMatrix <- function(solve) m <<- solve
getInverseMatrix <- function() m
list(set = set, get = get,setInverseMatrix = setInverseMatrix, getInverseMatrix = getInverseMatrix)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getInverseMatrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
matrix<-x$get
m<-solve(matrix, ...)
x$setInverseMatrix(m)
m
}
c <-matrix(c(2,4,3,1),nrow=2,ncol=2)
solve(c)
cacheSolve(c)
h=makeCacheMatrix(c)
cacheSolve(c)
h$cacheSolve(c)
h$c
cacheSolve(c)
h.cacheSolve(c)
h
h=cacheSolve(c)
h=cacheSolve(h)
h=cacheSolve()
h=makeCacheMatrix(c)
h$cacheSolve(c)
cacheSolve(h)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setInverseMatrix <- function(solve) m <<- solve
getInverseMatrix <- function() m
list(set = set, get = get,setInverseMatrix = setInverseMatrix, getInverseMatrix = getInverseMatrix)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getInverseMatrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m<-solve(data, ...)
x$setInverseMatrix(m)
m
}
h=makeCacheMatrix(c)
h$getInverseMatrix()
h$getInverseMatrix(c)
h$getInverseMatrix
h$getInverseMatrix
cacheSolve(h)
cacheSolve(h)
cacheSolve(h)
c <-matrix(c(1,4,3,1),nrow=2,ncol=2)
h=makeCacheMatrix(c)
cacheSolve(h)
cacheSolve(h)
c <-matrix(c(1,4,3,1),nrow=2,ncol=2)
h=makeCacheMatrix(c)
cacheSolve(h)
########################################################################################################################
#makeCacheMatrix would return a list of functions to get/set the cache of inverse matrix and matrix so we do not need to
#calculate the inverse matrix multiple time. Then we can use cacheSolve to get the value of inverse matrix. If the inverse
#of matrix is previous calculated. It would return the cached version
#simple Usage
#c <-matrix(c(1,4,3,1),nrow=2,ncol=2)
#h=makeCacheMatrix(c)
#cacheSolve(h)
#cacheSolve(h) if called 2nd time, will return the cached version without re-caculating.
#makeCacheMatrix: return a list of function
#set: set the value of matrix
#get: get the value of matrix
#setInverseMatrix:set the value of inverse matrix
#getInverseMatrix:get the value of inverse matrix
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setInverseMatrix <- function(solve) m <<- solve
getInverseMatrix <- function() m
list(set = set, get = get,setInverseMatrix = setInverseMatrix, getInverseMatrix = getInverseMatrix)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getInverseMatrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m<-solve(data, ...)
x$setInverseMatrix(m)
m
}
c <-matrix(c(1,4,3,1),nrow=2,ncol=2)
h=makeCacheMatrix(c)
cacheSolve(h)
cacheSolve(h)
